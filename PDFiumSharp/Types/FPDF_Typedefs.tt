<# /*
This file is part of PDFiumSharp, a wrapper around the PDFium library for the .NET framework.
Copyright (C) 2017 Tobias Meyer
License: Microsoft Reciprocal License (MS-RL)
*/ #>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs" #>
<# // ------------------------------------------------------ Code Start ------------------------------------------------------
//This types from here: https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h from line: // PDF types - use incomplete types (never completed) just for API type safety.
string[] Names = {
    "FPDF_ACTION",
    "FPDF_ANNOTATION",
    "FPDF_ATTACHMENT",
    "FPDF_BITMAP",
    "FPDF_BOOKMARK",
    "FPDF_BSTR",
    "FPDF_CLIPPATH",
    "FPDF_COLORSCHEME",
    "FPDF_DEST",
    "FPDF_DOCUMENT",
    "FPDF_FILEIDTYPE",
    "FPDF_FONT",
    "FPDF_FORMHANDLE",
    "FPDF_JAVASCRIPT_ACTION",
    "FPDF_LINK",
    "FPDF_PAGE",
    "FPDF_PAGELINK",
    "FPDF_PAGEOBJECT", // Page object(text, path, etc)
    "FPDF_PAGEOBJECTMARK",
    "FPDF_PAGERANGE",
    "FPDF_PATHSEGMENT",
	"FPDF_RECORDER",
    "FPDF_SCHHANDLE",
    "FPDF_SIGNATURE",
    "FPDF_STRUCTELEMENT",
    "FPDF_STRUCTTREE",
	"FPDF_TEXTPAGE",
	"FPDF_WIDGET" };
// --------------------------------------------------------- Code End ----------------------------------------------------- #>
#region Copyright and License
/*
This file is part of PDFiumSharp, a wrapper around the PDFium library for the .NET framework.
Copyright (C) 2017 Tobias Meyer
License: Microsoft Reciprocal License (MS-RL)
*/
#endregion

// AUTOGENERATED FILE
// DO NOT MODIFY
using System;
using System.Runtime.InteropServices;
using System.Threading;

namespace PDFiumSharp.Types
{
<# // ------------------------------------------------------ Code Start ------------------------------------------------------
foreach (string name in Names)
{
// --------------------------------------------------------- Code End ----------------------------------------------------- #>
	/// <summary>Handle to a <#=name#></summary>
	[StructLayout(LayoutKind.Sequential)]
    public struct <#=name#> : IHandle<<#=name#>>
	{
		private IntPtr ptr;

		/// <summary>Gets a value indicating whether the handle is <c>null</c>.</summary>
		public bool IsNull => ptr == IntPtr.Zero;

		<#=name#>(IntPtr ptr) => this.ptr = ptr;

		<#=name#> IHandle<<#=name#>>.SetToNull() => new <#=name#>(Interlocked.Exchange(ref ptr, IntPtr.Zero));

        /// <inheritdoc cref="object.ToString()"/>
        public override string ToString() => $"{nameof(<#=name#>)}: 0x{ptr.ToString("x16")}";
	}

<# // ------------------------------------------------------ Code Start ------------------------------------------------------
}
// --------------------------------------------------------- Code End ----------------------------------------------------- #>
}